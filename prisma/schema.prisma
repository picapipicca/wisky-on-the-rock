// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  phoneNum  String?     @unique
  email     String?  @unique
  avatarUrl String?
  regDate   DateTime @default(now())
  modDate   DateTime @updatedAt
  tokens    Token[]
  items     Item[]
  posts     Post[]
  comments Comment[]
  sameQuestions SameQuestion[]
  writtenReviews Review[] @relation(name:"writtenReviews")
  receivedReviews Review[] @relation(name:"receivedReviews")
  purchase Purchase[]
  sell Sell[]
  likes Like[]
  record Record[]
  streams Stream[]
  chats Chat[]
}

model Token {
  id      Int      @id @default(autoincrement())
  payload String   @unique
  user    User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  userId  Int

  @@index([userId])
}

model Item {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  imageUrl String
  name String
  description String @db.MediumText
  price Int
  likes Like[]
  purchase Purchase[]
  sell Sell[]
  record Record[]

  @@index([userId])
}

model Like {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int
  

  @@index([userId])
  @@index([itemId])
}



 model Post {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  question String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  title String
  comments Comment[]
  sameQuestions SameQuestion[]
  longitude Float?
  latitude Float?
 
  @@index([userId])
}

 model Comment {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  comment String @db.MediumText
 
  @@index([userId])
  @@index([postId])
}

 model SameQuestion {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
   post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
 
  @@index([userId])
  @@index([postId])
}

  model Review {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  writtenBy User @relation(name:"writtenReviews" , fields: [writtenById],references: [id], onDelete: Cascade)
  writtenById Int
  writtenAt User @relation(name:"receivedReviews" , fields: [writtenAtId],references: [id], onDelete: Cascade)
  writtenAtId Int
  review String @db.MediumText
  rate Int @default(1)
  
  @@index([writtenById])
  @@index([writtenAtId])
}

  model Purchase {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int

  @@index([userId])
  @@index([itemId])
}

model Sell {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int

  @@index([userId])
  @@index([itemId])
}

model Record {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int
  kind Kind

  @@index([userId])
  @@index([itemId])
}

enum Kind {
  Purchase
  Like
  Sell
}

model Stream{
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  name String
  description String @db.MediumText
  price Int
  chats Chat[]
  cloudFlareUrl String @default("")
  cloudFlareKey String @default("")
  cloudFlareId String @default("")

  @@index([userId])
}

model Chat {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  message String @db.MediumText
  stream Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int

  @@index([userId])
  @@index([streamId])
}