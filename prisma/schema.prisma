// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  phoneNum  String?     @unique
  email     String?  @unique
  avatarUrl String?
  regDate   DateTime @default(now())
  modDate   DateTime @updatedAt
  tokens    Token[]
  items     Item[]
  likes     Like[]
  posts     Post[]
  comments Comment[]
  sameQuestions SameQuestion[]
}

model Token {
  id      Int      @id @default(autoincrement())
  payload String   @unique
  user    User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  userId  Int
}

model Item {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  imageUrl String
  name String
  description String @db.MediumText
  price Int
  likes Like[]
}

model Like {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int
}

 model Post {
 id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  question String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  title String
  comments Comment[]
  sameQuestions SameQuestion[]
 }

 model Comment {
 id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  comment String @db.MediumText
 }

 model SameQuestion {
  id      Int      @id @default(autoincrement())
  regDate DateTime @default(now())
  modDate DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
   post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
 }